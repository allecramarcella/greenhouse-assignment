[{"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/index.js":"1","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/reportWebVitals.js":"2","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/App.js":"3","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/tomatoesDisplay/TomatoDisplay.js":"4","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/services/Data-services.js":"5","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/productionDisplay/ProductionDisplay.js":"6","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/temperatureData/TemperatureDisplay.js":"7","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/moistureDisplay.js":"8","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/phDisplay.js":"9","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/PhDisplay.js":"10","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/MoistureDisplay.js":"11","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/environmentDisplay/LightDisplay.js":"12","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/environmentDisplay/HumidityDisplay.js":"13","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/environmentDisplay/Temperature.js":"14"},{"size":289,"mtime":1610215140746,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1610188354762,"results":"17","hashOfConfig":"16"},{"size":3516,"mtime":1610463608500,"results":"18","hashOfConfig":"16"},{"size":4586,"mtime":1610463522948,"results":"19","hashOfConfig":"16"},{"size":1072,"mtime":1610442585429,"results":"20","hashOfConfig":"16"},{"size":1477,"mtime":1610443108261,"results":"21","hashOfConfig":"16"},{"size":2674,"mtime":1610448648186,"results":"22","hashOfConfig":"16"},{"size":2134,"mtime":1610451398869,"results":"23","hashOfConfig":"16"},{"size":2164,"mtime":1610451423698,"results":"24","hashOfConfig":"16"},{"size":2027,"mtime":1610453269258,"results":"25","hashOfConfig":"16"},{"size":2102,"mtime":1610452769258,"results":"26","hashOfConfig":"16"},{"size":2133,"mtime":1610453999664,"results":"27","hashOfConfig":"16"},{"size":2169,"mtime":1610454005490,"results":"28","hashOfConfig":"16"},{"size":2111,"mtime":1610454180745,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1llztf8",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"32"},"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/index.js",[],["67","68"],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/reportWebVitals.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/App.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/tomatoesDisplay/TomatoDisplay.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/services/Data-services.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/productionDisplay/ProductionDisplay.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/temperatureData/TemperatureDisplay.js",["69"],"import React, { Component } from 'react'\n\nimport './TemperatureDisplay.css'\n\n\nexport default class TemperatureDisplay extends Component {\n\n    state = {\n        secondHighestTemp: '',\n        daysWithSecondHighTemp: []\n    }\n\n    componentDidUpdate(prevProps){\n        if(prevProps.environmentData !== this.props.environmentData){\n            this.findSecondHighTemp(this.props.environmentData)\n        }\n    }\n\n    // find the second highest temperature in environment data\n    findSecondHighTemp = (environmentData) => {\n        const tempSortedByHight = environmentData.map(data => {\n            let temperature\n            if(data.data) {\n                temperature = data.data.temperature\n            }\n            return temperature\n        })\n        .sort((a,b) => b - a)\n        .reduce((unique, item) => {\n            return unique.includes(item) ? unique : [...unique, item]\n        }, [])\n\n        const secondHighestTemp = tempSortedByHight[1]\n    \n        this.setState({\n            secondHighestTemp: secondHighestTemp,\n        }, () => this.findDaysSecondHighTemp(secondHighestTemp))\n    }\n\n    // find days with the second highest temperature in environment data\n    findDaysSecondHighTemp = (secondHighestTemp) => {\n        const temperatureData = this.props.environmentData\n\n        const daysSecondHighTemp = temperatureData.filter(data => {\n            if(data.data && data.data.temperature) {\n                return data.data.temperature === secondHighestTemp\n            }\n        })\n        .reduce((unique, item) => {\n            return unique.includes(item.time) ? unique : [...unique, item.time]\n        }, [])\n\n        this.setState({\n            daysWithSecondHighTemp: daysSecondHighTemp,\n        })\n    }     \n  \n\n    render() {\n        const arrDaysSecondHighTemp = this.state.daysWithSecondHighTemp\n        const secondHighestTemp = this.state.secondHighestTemp\n\n        return (\n            <div className='outer-container-temperature'>\n                <h2>Days second highest temperature</h2>   \n                <div className='temperature-info'>\n                    <div>\n                        <p>Second highest temperature: </p>\n                        <h3>{secondHighestTemp} degree</h3> \n                    </div>\n                    <div>\n                    {arrDaysSecondHighTemp.map(date => {\n                        return (\n                            <ul key={date}>\n                                <li>{date}</li>                          \n                            </ul>  \n                            )\n                    })}\n                    </div> \n                </div>    \n            </div>\n        )\n    }\n}\n","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/moistureDisplay.js",["70"],"import React, { Component } from 'react'\nimport Chart from 'chart.js'\n\nimport './moistureDisplay.css'\n\n\nexport default class MoistureDisplay extends Component {\n\n    state = {\n        labels: [],\n        moistData: []\n    }\n\n    componentDidUpdate(prevProps){\n        if(prevProps.soilData !== this.props.soilData){\n            this.avageragByDay(this.props.soilData)\n        }\n    }\n\n    avageragByDay = (data) => {\n        const uniqueDays = data.reduce((unique, item) => {\n            return unique.includes(item.time) ? unique : [...unique, item.time]\n        }, [])\n\n        const dataSetPerDay = uniqueDays.map(date => {\n            return  data.filter(data => data.time === date)\n        })\n\n        const moistureDataPerDay = dataSetPerDay.map(dataPerDay => {\n            const moisturePerDay = dataPerDay.map(data =>  {\n                if(data.data) {\n                    return data.data.moisture\n                }\n            })\n            return moisturePerDay\n        })\n\n        const onlyValidMoistureData = moistureDataPerDay.map(x => {\n            const filtered = x.filter(x => x !== undefined)\n            const filtteredArrLenght = filtered.length\n            return filtered.reduce((a, c) => a + c )/filtteredArrLenght\n        })\n        \n        this.setState({\n            moistData: onlyValidMoistureData,\n            labels: uniqueDays\n        }, () => this.setChart())\n    }\n\n    setChart = () => {\n        const ctx = document.getElementById(\"myChart\");\n        new Chart(ctx, {\n          type: \"line\",\n          data: {\n            labels: this.state.labels,\n            datasets: [\n              {\n                label: 'Average moisture level per day',\n                data: this.state.moistData,\n                backgroundColor: '#F5F5F5',\n                borderColor: 'black',\n                borderWidth: 1\n              }\n            ]\n          }\n        });\n    }\n\n    render() {\n        return (\n            <div className='outer-container'>\n                <h2>Soil data - Moisture</h2>\n                 <canvas id=\"myChart\" width=\"400\" height=\"400\" />    \n            </div>\n        )\n    }\n}\n",["71","72"],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/phDisplay.js",["73"],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/PhDisplay.js",["74"],"import React, { Component } from 'react'\nimport Chart from 'chart.js'\n\n\nexport default class PhDisplay extends Component {\n    state = {\n        labels: [],\n        phData: [],\n    }\n\n    componentDidUpdate(prevProps){\n        if(prevProps.soilData !== this.props.soilData){\n            this.avageragByDay(this.props.soilData)\n        }\n    }\n\n    avageragByDay = (data) => {\n        const uniqueDays = data.reduce((unique, item) => {\n            return unique.includes(item.time) ? unique : [...unique, item.time]\n        }, [])\n\n        const dataSetPerDay = uniqueDays.map(date => {\n            return  data.filter(data => data.time === date)\n        })\n\n        const phDataPerDay = dataSetPerDay.map(dataPerDay => {\n            const phPerDay = dataPerDay.map(data =>  {\n                if(data.data) {\n                    return data.data.pH\n                }\n            })\n            return phPerDay\n        })\n  \n        const onlyValidPhData = phDataPerDay.map(x => {\n            const filtered = x.filter(x => x !== undefined)\n            const filtteredArrLenght = filtered.length\n            return filtered.reduce((a, c) => a + c )/filtteredArrLenght\n        })\n\n        this.setState({\n            phData: onlyValidPhData,\n            labels: uniqueDays\n        }, this.setChart)\n    }\n\n    setChart = () => {\n        const ctx = document.getElementById(\"myChart2\");\n        new Chart(ctx, {\n          type: \"line\",\n          data: {\n            labels: this.state.labels,\n            datasets: [\n              {\n                label: 'Average ph level per day',\n                data: this.state.phData,\n                backgroundColor: '#F5F5F5',\n                borderColor: 'black',\n                borderWidth: 1\n              }\n            ]\n          }\n        }); \n    }\n\n    render() {\n        return (\n            <div className='outer-container'>\n                <h2>Soil data - Ph</h2>\n                 <canvas id=\"myChart2\" width=\"400\" height=\"400\" />    \n            </div>\n        )\n    }\n    \n}\n","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/MoistureDisplay.js",["75"],"import React, { Component } from 'react'\nimport Chart from 'chart.js'\n\n\nexport default class MoistureDisplay extends Component {\n\n    state = {\n        labels: [],\n        moistData: []\n    }\n\n    componentDidUpdate(prevProps){\n        if(prevProps.soilData !== this.props.soilData){\n            this.avageragByDay(this.props.soilData)\n        }\n    }\n\n    avageragByDay = (data) => {\n        const uniqueDays = data.reduce((unique, item) => {\n            return unique.includes(item.time) ? unique : [...unique, item.time]\n        }, [])\n\n        const dataSetPerDay = uniqueDays.map(date => {\n            return  data.filter(data => data.time === date)\n        })\n\n        const moistureDataPerDay = dataSetPerDay.map(dataPerDay => {\n            const moisturePerDay = dataPerDay.map(data =>  {\n                if(data.data) {\n                    return data.data.moisture\n                }\n            })\n            return moisturePerDay\n        })\n\n        const onlyValidMoistureData = moistureDataPerDay.map(x => {\n            const filtered = x.filter(x => x !== undefined)\n            const filtteredArrLenght = filtered.length\n            return filtered.reduce((a, c) => a + c )/filtteredArrLenght\n        })\n        \n        this.setState({\n            moistData: onlyValidMoistureData,\n            labels: uniqueDays\n        }, () => this.setChart())\n    }\n\n    setChart = () => {\n        const ctx = document.getElementById(\"myChart\");\n        new Chart(ctx, {\n          type: \"line\",\n          data: {\n            labels: this.state.labels,\n            datasets: [\n              {\n                label: 'Average moisture level per day',\n                data: this.state.moistData,\n                backgroundColor: '#F5F5F5',\n                borderColor: 'black',\n                borderWidth: 1\n              }\n            ]\n          }\n        });\n    }\n\n    render() {\n        return (\n            <div className='outer-container'>\n                <h2>Soil data - Moisture</h2>\n                 <canvas id=\"myChart\" width=\"400\" height=\"400\" />    \n            </div>\n        )\n    }\n}\n","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/environmentDisplay/LightDisplay.js",["76"],"import React, { Component } from 'react'\nimport Chart from 'chart.js'\n\nexport default class LightDisplay extends Component {\n    state = {\n        labels: [],\n        lightData: []\n    }\n\n    componentDidUpdate(prevProps){\n        if(prevProps.environmentData !== this.props.environmentData){\n            this.avageragByDay(this.props.environmentData)\n        }\n    }\n\n    avageragByDay = (data) => {\n        const uniqueDays = data.reduce((unique, item) => {\n            return unique.includes(item.time) ? unique : [...unique, item.time]\n        }, [])\n\n        const dataSetPerDay = uniqueDays.map(date => {\n            return  data.filter(data => data.time === date)\n        })\n\n        const lightDataPerDay = dataSetPerDay.map(dataPerDay => {\n            const lightPerDay = dataPerDay.map(data =>  {\n                if(data.data) {\n                    return data.data['light intensity']\n                }\n            })\n            return lightPerDay\n        })\n\n        const onlyValidLightData = lightDataPerDay.map(x => {\n            const filtered = x.filter(x => x !== undefined)\n            const filtteredArrLenght = filtered.length\n            return filtered.reduce((a, c) => a + c )/filtteredArrLenght\n        })\n        \n        this.setState({\n            lightData: onlyValidLightData,\n            labels: uniqueDays\n        }, () => this.setChart())\n    }\n\n    setChart = () => {\n        const ctx = document.getElementById(\"myChart3\");\n        new Chart(ctx, {\n          type: \"line\",\n          data: {\n            labels: this.state.labels,\n            datasets: [\n              {\n                label: 'Average light intensity level per day',\n                data: this.state.lightData,\n                backgroundColor: '#F5F5F5',\n                borderColor: 'black',\n                borderWidth: 1\n              }\n            ]\n          }\n        });\n    }\n\n    render() {\n        return (\n            <div className='outer-container'>\n                <h2>Environment data - Light intensity</h2>\n                 <canvas id=\"myChart3\" width=\"400\" height=\"400\" />    \n            </div>\n        )\n    }\n}\n","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/environmentDisplay/HumidityDisplay.js",["77"],"import React, { Component } from 'react'\nimport Chart from 'chart.js'\n\nexport default class HumidityDisplay extends Component {\n    state = {\n        labels: [],\n        humidityData: []\n    }\n\n    componentDidUpdate(prevProps){\n        if(prevProps.environmentData !== this.props.environmentData){\n            this.avageragByDay(this.props.environmentData)\n        }\n    }\n\n    avageragByDay = (data) => {\n        const uniqueDays = data.reduce((unique, item) => {\n            return unique.includes(item.time) ? unique : [...unique, item.time]\n        }, [])\n\n        const dataSetPerDay = uniqueDays.map(date => {\n            return  data.filter(data => data.time === date)\n        })\n\n        const humidityDataPerDay = dataSetPerDay.map(dataPerDay => {\n            const humidityPerDay = dataPerDay.map(data =>  {\n                if(data.data) {\n                    return data.data['relative humidity']\n                }\n            })\n            return humidityPerDay\n        })\n\n        const onlyValidHumidityData = humidityDataPerDay.map(x => {\n            const filtered = x.filter(x => x !== undefined)\n            const filtteredArrLenght = filtered.length\n            return filtered.reduce((a, c) => a + c )/filtteredArrLenght\n        })\n        \n        this.setState({\n            humidityData: onlyValidHumidityData,\n            labels: uniqueDays\n        }, () => this.setChart())\n    }\n\n    setChart = () => {\n        const ctx = document.getElementById(\"myChart4\");\n        new Chart(ctx, {\n          type: \"line\",\n          data: {\n            labels: this.state.labels,\n            datasets: [\n              {\n                label: 'Average relative humidity level per day',\n                data: this.state.humidityData,\n                backgroundColor: '#F5F5F5',\n                borderColor: 'black',\n                borderWidth: 1\n              }\n            ]\n          }\n        });\n    }\n\n    render() {\n        return (\n            <div className='outer-container'>\n                <h2>Environment data - Relative humidity</h2>\n                 <canvas id=\"myChart4\" width=\"400\" height=\"400\" />    \n            </div>\n        )\n    }\n}\n","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/environmentDisplay/Temperature.js",["78"],"import React, { Component } from 'react'\nimport Chart from 'chart.js'\n\nexport default class Temperature extends Component {\n    state = {\n        labels: [],\n        tempData: []\n    }\n\n    componentDidUpdate(prevProps){\n        if(prevProps.environmentData !== this.props.environmentData){\n            this.avageragByDay(this.props.environmentData)\n        }\n    }\n\n    avageragByDay = (data) => {\n        const uniqueDays = data.reduce((unique, item) => {\n            return unique.includes(item.time) ? unique : [...unique, item.time]\n        }, [])\n\n        const dataSetPerDay = uniqueDays.map(date => {\n            return  data.filter(data => data.time === date)\n        })\n\n        const tempDataPerDay = dataSetPerDay.map(dataPerDay => {\n            const tempPerDay = dataPerDay.map(data =>  {\n                if(data.data) {\n                    return data.data['temperature']\n                }\n            })\n            return tempPerDay\n        })\n\n        const onlyValidTempData = tempDataPerDay.map(x => {\n            const filtered = x.filter(x => x !== undefined)\n            const filtteredArrLenght = filtered.length\n            return filtered.reduce((a, c) => a + c )/filtteredArrLenght\n        })\n        \n        this.setState({\n            tempData: onlyValidTempData,\n            labels: uniqueDays\n        }, () => this.setChart())\n    }\n\n    setChart = () => {\n        const ctx = document.getElementById(\"myChart5\");\n        new Chart(ctx, {\n          type: \"line\",\n          data: {\n            labels: this.state.labels,\n            datasets: [\n              {\n                label: 'Average temperature level per day',\n                data: this.state.tempData,\n                backgroundColor: '#F5F5F5',\n                borderColor: 'black',\n                borderWidth: 1\n              }\n            ]\n          }\n        });\n    }\n\n    render() {\n        return (\n            <div className='outer-container'>\n                <h2>Environment data - Temperature</h2>\n                 <canvas id=\"myChart5\" width=\"400\" height=\"400\" />    \n            </div>\n        )\n    }\n}\n",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":44,"column":64,"nodeType":"85","messageId":"86","endLine":44,"endColumn":66},{"ruleId":"83","severity":1,"message":"87","line":30,"column":56,"nodeType":"85","messageId":"86","endLine":30,"endColumn":58},{"ruleId":"79","replacedBy":"88"},{"ruleId":"81","replacedBy":"89"},{"ruleId":"83","severity":1,"message":"87","line":30,"column":50,"nodeType":"85","messageId":"86","endLine":30,"endColumn":52},{"ruleId":"83","severity":1,"message":"87","line":27,"column":50,"nodeType":"85","messageId":"86","endLine":27,"endColumn":52},{"ruleId":"83","severity":1,"message":"87","line":28,"column":56,"nodeType":"85","messageId":"86","endLine":28,"endColumn":58},{"ruleId":"83","severity":1,"message":"87","line":26,"column":53,"nodeType":"85","messageId":"86","endLine":26,"endColumn":55},{"ruleId":"83","severity":1,"message":"87","line":26,"column":56,"nodeType":"85","messageId":"86","endLine":26,"endColumn":58},{"ruleId":"83","severity":1,"message":"87","line":26,"column":52,"nodeType":"85","messageId":"86","endLine":26,"endColumn":54},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.",["90"],["91"],"no-global-assign","no-unsafe-negation"]
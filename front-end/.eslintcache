[{"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/index.js":"1","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/reportWebVitals.js":"2","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/App.js":"3","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/tomatoesDisplay/TomatoDisplay.js":"4","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/services/Data-services.js":"5","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/productionDisplay/ProductionDisplay.js":"6","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/temperatureData/TemperatureDisplay.js":"7","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/SoilDisplay.js":"8","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/SoilDisplay copy.js":"9"},{"size":289,"mtime":1610215140746,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1610188354762,"results":"12","hashOfConfig":"11"},{"size":3764,"mtime":1610443324948,"results":"13","hashOfConfig":"11"},{"size":4586,"mtime":1610442488474,"results":"14","hashOfConfig":"11"},{"size":1072,"mtime":1610442585429,"results":"15","hashOfConfig":"11"},{"size":1477,"mtime":1610443108261,"results":"16","hashOfConfig":"11"},{"size":2514,"mtime":1610443855601,"results":"17","hashOfConfig":"11"},{"size":3133,"mtime":1610297204636,"results":"18","hashOfConfig":"11"},{"size":2612,"mtime":1610442552729,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1llztf8",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/index.js",[],["42","43"],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/reportWebVitals.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/App.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/tomatoesDisplay/TomatoDisplay.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/services/Data-services.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/productionDisplay/ProductionDisplay.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/temperatureData/TemperatureDisplay.js",["44"],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/SoilDisplay.js",["45","46"],"import React, { Component } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport DataService from '../../services/Data-services'\n\nimport './SoilDisplay.css'\n\n\nexport default class SoilDisplay extends Component {\n\n    state = {\n        labels: [],\n        dataSets: []\n    }\n\n    dataService = new DataService()\n\n    componentDidMount(){\n        this.getDataSoil()\n    }\n\n    getDataSoil = () => {\n        this.dataService.getDataSoil()\n        .then(response => {\n            this.convertDate(response)\n            this.setDatasets(response)\n        })\n        .catch(err => console.log(err))\n    }\n\n    convertDate = (soilData) => {\n        const soilDateConverted = soilData.map(data => {\n            const convertedDate = new Date(data.time).toLocaleString()\n            return convertedDate\n        })\n        this.setLabelChart(soilDateConverted)\n    }\n\n    setLabelChart = (dates) => {\n        this.setState({\n            labels: dates\n        })\n    }\n\n    setDatasets = (soilData) => {\n        const moistData = soilData.map(data => {\n            if(data.data){\n                if(data.data.moisture){\n                    return data.data.moisture\n                }\n            }\n        })\n\n\n        this.setState({\n            dataSets: [\n                {\n                    label: 'Moisture',\n                    fill: false,\n                    lineTension: 0.5,\n                    backgroundColor: 'rgba(75,192,192,1)',\n                    borderColor: 'rgba(0,0,0,1)',\n                    borderWidth: 2,\n                    data: [1, 2, 4, 5, 6]\n                }\n            ]\n        })\n    }\n\n    render() {\n        console.log(this.state)\n\n        return (\n            <div>\n                <Line\n                data={this.state}\n                options={{\n                    maintainAspectRatio: true,\n                        title: {\n                        display: false,\n                        text: 'Title',\n                        fontSize: 25\n                        },\n                        legend: {\n                        display: false,\n                        position: 'bottom'\n                        },\n                        scales: {\n                    xAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: 'Date',\n                            fontSize: 10\n                        },\n                        position: 'bottom',\n                        gridLines: {\n                            display: false\n                        }\n                    }],\n                    yAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: 'Moisture',\n                            fontSize: 10\n                        }\n                    }]\n                    },\n                    plugins: {\n\t\t\t\t\t\tzoom: {\n\t\t\t\t\t\t\tpan: {\n\t\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\t\tmode: 'y'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tzoom: {\n\t\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\t\tmode: 'xy'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n                }}\n                />\n            </div>\n        )\n    }\n}\n",["47","48"],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/SoilDisplay copy.js",["49"],"import React, { Component } from 'react'\nimport Chart from 'chart.js'\nimport DataService from '../../services/Data-services'\n\nimport './SoilDisplay.css'\n\n\nexport default class SoilDisplayCopy extends Component {\n\n    state = {\n        labels: [],\n        moistData: []\n    }\n\n    dataService = new DataService()\n\n    componentDidMount(){\n        this.getDataSoil()\n    }\n\n    getDataSoil = () => {\n        this.dataService.getDataSoil()\n        .then(response => {\n            this.convertDate(response)\n            this.setDatasets(response)\n        })\n        .catch(err => console.log(err))\n    }\n\n    convertDate = (soilData) => {\n        const soilDateConverted = soilData.map(data => {\n            const convertedDate = new Date(data.time).toLocaleString().slice(0, 10)\n            data.time = convertedDate\n            return data\n        })\n        this.avageragByDay(soilDateConverted)\n    }\n\n    avageragByDay = (data) => {\n        const uniqueDays = data.reduce((unique, item) => {\n            return unique.includes(item.time) ? unique : [...unique, item.time]\n        }, [])\n\n        const dataSetPerDay = uniqueDays.map(date => {\n            return  data.filter(data => data.time === date)\n        })\n\n        const moistureDataPerDay = dataSetPerDay.map(element => {\n            const test = element.map(test =>  {\n                if(test.data) {\n                    return test.data.moisture\n                }\n            })\n            return test\n        })\n\n        const test2 = moistureDataPerDay.map(x => {\n            const filtered = x.filter(x => x !== undefined)\n            const arrLenght = filtered.length\n            return filtered.reduce((a, c) => a + c )/arrLenght\n        })\n        \n            \n        this.setState({\n            moistData: test2,\n            labels: uniqueDays\n        }, () => this.setChart())\n    }\n\n    setChart = () => {\n        const ctx = document.getElementById(\"myChart\");\n        new Chart(ctx, {\n          type: \"line\",\n          data: {\n            labels: this.state.labels,\n            datasets: [\n              {\n                label: 'Average moisture level per day',\n                data: this.state.moistData,\n                backgroundColor: '#F5F5F5',\n                borderColor: 'black',\n                borderWidth: 1\n              }\n            ]\n          }\n        });\n    }\n\n    render() {\n\n        return (\n            <div className='outer-container'>\n                <h2>Soil data</h2>\n                <h3>Moisture</h3>\n                 <canvas id=\"myChart\" width=\"400\" height=\"400\" />    \n            </div>\n        )\n    }\n}\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":43,"column":64,"nodeType":"56","messageId":"57","endLine":43,"endColumn":66},{"ruleId":"58","severity":1,"message":"59","line":45,"column":15,"nodeType":"60","messageId":"61","endLine":45,"endColumn":24},{"ruleId":"54","severity":1,"message":"62","line":45,"column":45,"nodeType":"56","messageId":"57","endLine":45,"endColumn":47},{"ruleId":"50","replacedBy":"63"},{"ruleId":"52","replacedBy":"64"},{"ruleId":"54","severity":1,"message":"62","line":49,"column":43,"nodeType":"56","messageId":"57","endLine":49,"endColumn":45},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'moistData' is assigned a value but never used.","Identifier","unusedVar","Array.prototype.map() expects a value to be returned at the end of arrow function.",["65"],["66"],"no-global-assign","no-unsafe-negation"]
[{"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/index.js":"1","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/reportWebVitals.js":"2","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/App.js":"3","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/tomatoesDisplay/TomatoDisplay.js":"4","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/services/Data-services.js":"5","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/productionDisplay/ProductionDisplay.js":"6","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/temperatureData/TemperatureDisplay.js":"7","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/SoilDisplay.js":"8","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/SoilDisplay copy.js":"9"},{"size":289,"mtime":1610215140746,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1610188354762,"results":"12","hashOfConfig":"11"},{"size":1118,"mtime":1610308206573,"results":"13","hashOfConfig":"11"},{"size":4648,"mtime":1610270842516,"results":"14","hashOfConfig":"11"},{"size":1341,"mtime":1610291110401,"results":"15","hashOfConfig":"11"},{"size":2489,"mtime":1610292038862,"results":"16","hashOfConfig":"11"},{"size":3108,"mtime":1610293927596,"results":"17","hashOfConfig":"11"},{"size":3133,"mtime":1610297204636,"results":"18","hashOfConfig":"11"},{"size":2622,"mtime":1610307973694,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1llztf8",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/index.js",[],["41","42"],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/reportWebVitals.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/App.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/tomatoesDisplay/TomatoDisplay.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/services/Data-services.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/productionDisplay/ProductionDisplay.js",[],"/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/temperatureData/TemperatureDisplay.js",["43"],"import React, { Component } from 'react'\nimport DataService from '../../services/Data-services'\n\nimport './TemperatureDisplay.css'\n\n\nexport default class TemperatureDisplay extends Component {\n\n    state = {\n        temperatureData: [],\n        secondHighestTemp: '',\n        daysWithSecondHighTemp: []\n    }\n\n    dataService = new DataService()\n\n    componentDidMount(){\n        this.getDataTemperature()\n    }\n\n    getDataTemperature = () => {\n        this.dataService.getDataEnvironment()\n        .then(response => {\n            this.convertDate(response)\n        })\n        .catch(err => console.log(err))\n    }\n\n    convertDate = (temperatureData) => {\n        const temperatureDateConverted = temperatureData.map(data => {\n            const convertedDate = new Date(data.time).toLocaleString().slice(0, 10)\n            data.time = convertedDate\n            return data\n        })\n\n        this.setState({\n            temperatureData: temperatureDateConverted\n        }, () => this.findSecondHighTemp(this.state.temperatureData))\n    }\n\n    findSecondHighTemp = (data) => {\n        const tempSortedByHight = data.map(data => {\n            let temperature\n            if(data.data) {\n                temperature = data.data.temperature\n            }\n            return temperature\n        })\n        .sort((a,b) => b - a)\n        .reduce((unique, item) => {\n            return unique.includes(item) ? unique : [...unique, item]\n        }, [])\n\n        const secondHighestTemp = tempSortedByHight[1]\n      \n        this.setState({\n            secondHighestTemp: secondHighestTemp\n        }, () => this.findDaysSecondHighTemp(this.state.secondHighestTemp))\n    }\n\n    findDaysSecondHighTemp = (secondHighestTemp) => {\n        const temperatureData = this.state.temperatureData\n\n        const daysSecondHighTemp = temperatureData.filter(data => {\n            if(data.data && data.data.temperature) {\n                return data.data.temperature === secondHighestTemp\n            }\n        })\n        .reduce((unique, item) => {\n            return unique.includes(item.time) ? unique : [...unique, item.time]\n        }, [])\n    \n        this.setState({\n            daysWithSecondHighTemp: daysSecondHighTemp\n        })\n    }     \n  \n\n    render() {\n        const arrDaysSecondHighTemp = this.state.daysWithSecondHighTemp\n\n        return (\n            <div className='outer-container-temperature'>\n                <h2>Days second highest temperature</h2>   \n                <div className='temperature-info'>\n                    <div>\n                        <p>Second highest temperature: </p>\n                        <h3>{this.state.secondHighestTemp} degree</h3>\n                    </div>\n                    <div>\n                    {arrDaysSecondHighTemp.map(date => {\n                        return (\n                            <ul key={date}>\n                                <li>{date}</li>                          \n                            </ul>  \n                            )\n                    })}\n                    </div> \n                </div>    \n            </div>\n        )\n    }\n}\n","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/SoilDisplay.js",["44","45"],"import React, { Component } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport DataService from '../../services/Data-services'\n\nimport './SoilDisplay.css'\n\n\nexport default class SoilDisplay extends Component {\n\n    state = {\n        labels: [],\n        dataSets: []\n    }\n\n    dataService = new DataService()\n\n    componentDidMount(){\n        this.getDataSoil()\n    }\n\n    getDataSoil = () => {\n        this.dataService.getDataSoil()\n        .then(response => {\n            this.convertDate(response)\n            this.setDatasets(response)\n        })\n        .catch(err => console.log(err))\n    }\n\n    convertDate = (soilData) => {\n        const soilDateConverted = soilData.map(data => {\n            const convertedDate = new Date(data.time).toLocaleString()\n            return convertedDate\n        })\n        this.setLabelChart(soilDateConverted)\n    }\n\n    setLabelChart = (dates) => {\n        this.setState({\n            labels: dates\n        })\n    }\n\n    setDatasets = (soilData) => {\n        const moistData = soilData.map(data => {\n            if(data.data){\n                if(data.data.moisture){\n                    return data.data.moisture\n                }\n            }\n        })\n\n\n        this.setState({\n            dataSets: [\n                {\n                    label: 'Moisture',\n                    fill: false,\n                    lineTension: 0.5,\n                    backgroundColor: 'rgba(75,192,192,1)',\n                    borderColor: 'rgba(0,0,0,1)',\n                    borderWidth: 2,\n                    data: [1, 2, 4, 5, 6]\n                }\n            ]\n        })\n    }\n\n    render() {\n        console.log(this.state)\n\n        return (\n            <div>\n                <Line\n                data={this.state}\n                options={{\n                    maintainAspectRatio: true,\n                        title: {\n                        display: false,\n                        text: 'Title',\n                        fontSize: 25\n                        },\n                        legend: {\n                        display: false,\n                        position: 'bottom'\n                        },\n                        scales: {\n                    xAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: 'Date',\n                            fontSize: 10\n                        },\n                        position: 'bottom',\n                        gridLines: {\n                            display: false\n                        }\n                    }],\n                    yAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: 'Moisture',\n                            fontSize: 10\n                        }\n                    }]\n                    },\n                    plugins: {\n\t\t\t\t\t\tzoom: {\n\t\t\t\t\t\t\tpan: {\n\t\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\t\tmode: 'y'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tzoom: {\n\t\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\t\tmode: 'xy'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n                }}\n                />\n            </div>\n        )\n    }\n}\n","/Users/marcella/Documents/ironhack /Carreer hack/vacatures/physee/assignment/physee-assignment/front-end/src/components/soilData/SoilDisplay copy.js",["46"],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":64,"column":64,"nodeType":"53","messageId":"54","endLine":64,"endColumn":66},{"ruleId":"55","severity":1,"message":"56","line":45,"column":15,"nodeType":"57","messageId":"58","endLine":45,"endColumn":24},{"ruleId":"51","severity":1,"message":"59","line":45,"column":45,"nodeType":"53","messageId":"54","endLine":45,"endColumn":47},{"ruleId":"51","severity":1,"message":"59","line":49,"column":43,"nodeType":"53","messageId":"54","endLine":49,"endColumn":45},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'moistData' is assigned a value but never used.","Identifier","unusedVar","Array.prototype.map() expects a value to be returned at the end of arrow function.","no-global-assign","no-unsafe-negation"]